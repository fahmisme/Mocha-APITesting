{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2022-08-14T12:36:32.395Z",
    "end": "2022-08-14T12:36:32.506Z",
    "duration": 111,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3ba02dcb-e310-4b89-ac25-b8c4d1a00452",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e5b1bc23-f8ff-42c7-93db-afcce4dffbd1",
          "title": "Get User",
          "fullFile": "E:\\My Class\\Fazztrack\\w3-1\\tugasAPI\\testcases\\getUser.js",
          "file": "\\testcases\\getUser.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Get User\"",
              "fullTitle": "Get User \"before all\" hook in \"Get User\"",
              "timedOut": false,
              "duration": 43,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Preparing data..');\nlet dataDummy = require('../testData/dummyData.json')\nlet response = await connectAPI.postData(dataDummy);\nconsole.log('Users 1 created');\nidData = response.body.id;",
              "err": {},
              "uuid": "a5a79625-428b-404d-951a-15ac6a029fe7",
              "parentUUID": "e5b1bc23-f8ff-42c7-93db-afcce4dffbd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Get User\"",
              "fullTitle": "Get User \"after all\" hook in \"Get User\"",
              "timedOut": false,
              "duration": 6,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await connectAPI.deleteData();\nexpect(response.statusCode).to.equal(200);\nconsole.log('Deleting all data..');",
              "err": {},
              "uuid": "217e9c1d-2dfe-498b-b65d-c4b96d84e87a",
              "parentUUID": "e5b1bc23-f8ff-42c7-93db-afcce4dffbd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Get user with valid data",
              "fullTitle": "Get User Get user with valid data",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await connectAPI.getData(idData);\nexpect(response.statusCode).to.equal(200);\nexpect(response.body).has.jsonSchema(jsonSchema);\n//chai-things and chai-like\nexpect(response.body.hobbies).contains.something.like('Read a romance book')",
              "err": {},
              "uuid": "b4f5e5e2-c672-4ad8-b6fd-763def1a9720",
              "parentUUID": "e5b1bc23-f8ff-42c7-93db-afcce4dffbd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Get user with invalid data",
              "fullTitle": "Get User Get user with invalid data",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let idInput = \"b27581ce-0a73-4890-8d47\";\nlet response = await connectAPI.getData(idInput);\nexpect(response.statusCode).to.not.equal(200);\nexpect(response.body.id).to.not.equal(idInput);\nexpect(response.body.errorCode).equal('ER-01');\nexpect(response.body.message).equal('user not found');",
              "err": {},
              "uuid": "67eb1781-68c4-416b-a5b1-8ee4cf7edd44",
              "parentUUID": "e5b1bc23-f8ff-42c7-93db-afcce4dffbd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b4f5e5e2-c672-4ad8-b6fd-763def1a9720",
            "67eb1781-68c4-416b-a5b1-8ee4cf7edd44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
          "title": "Put User",
          "fullFile": "E:\\My Class\\Fazztrack\\w3-1\\tugasAPI\\testcases\\putUser.js",
          "file": "\\testcases\\putUser.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Put User\"",
              "fullTitle": "Put User \"before all\" hook in \"Put User\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "console.log('Preparing data..');\nlet dataDummy = require('../testData/dummyData.json')\nlet response = await connectAPI.postData(dataDummy);\nconsole.log('Users 1 created');\nidData = response.body.id;",
              "err": {},
              "uuid": "39bfcf3b-1204-4806-8188-594d4b7415ca",
              "parentUUID": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Put User\"",
              "fullTitle": "Put User \"after all\" hook in \"Put User\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = await connectAPI.deleteData();\nexpect(response.statusCode).to.equal(200);\nconsole.log('Deleting all data..');",
              "err": {},
              "uuid": "8c1fcb39-a363-4ea9-87e4-8d0cd918e327",
              "parentUUID": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "User can update occupation and nationality",
              "fullTitle": "Put User User can update occupation and nationality",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let occupation = 'Researcher';\nlet nationality = 'Estonian';\nconst dataPut = dataPutDummy.dummyPutData(idData, occupation, nationality);\nlet response = await connectAPI.putData(dataPut);\nexpect(response.statusCode).to.equal(200);\nexpect(response.body.occupation).to.equal(occupation);\nexpect(response.body.nationality).to.equal(nationality);\nexpect(response.body).has.jsonSchema(jsonSchema);\n//chai-things and chai-like\nexpect(response.body.hobbies).contains.something.like('Read a newspaper at the 5 am')",
              "err": {},
              "uuid": "16548f83-c24b-4f61-a143-a401b86ef239",
              "parentUUID": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can't update his age if input with 0 ",
              "fullTitle": "Put User User can't update his age if input with 0 ",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let age = 0;\nconst dataPut = dataPutDummy.dummyPutData(idData, undefined, undefined, age);\nlet response = await connectAPI.putData(dataPut);\nexpect(response.statusCode).to.not.equal(200);\nexpect(response.body.errorCode).to.equal('ER-03');\nexpect(response.body.message).to.equal('you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender');",
              "err": {},
              "uuid": "ce00940b-b7e8-4e03-8220-2f7bcb1ffab4",
              "parentUUID": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can't update his hobby if input with empty data ",
              "fullTitle": "Put User User can't update his hobby if input with empty data ",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let hobbies = [];\nconst dataPut = dataPutDummy.dummyPutData(idData, undefined, undefined, undefined, hobbies);\nlet response = await connectAPI.putData(dataPut);\nexpect(response.statusCode).to.not.equal(200);\nexpect(response.body.errorCode).to.equal('ER-03');\nexpect(response.body.message).to.equal('you must specify data for firstname, lastName, age, occupation, nationality, hobbies (at least 1), and gender');",
              "err": {},
              "uuid": "037617a1-8976-47ef-9a9b-a98061e9e5d5",
              "parentUUID": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User can't update data if his id is null",
              "fullTitle": "Put User User can't update data if his id is null",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let idInput = \"\";\nconst dataPut = dataPutDummy.dummyPutData(idInput);\nlet response = await connectAPI.putData(dataPut);\nexpect(response.statusCode).to.not.equal(200);\nexpect(response.body.errorCode).equal('ER-01');\nexpect(response.body.message).equal('user not found');",
              "err": {},
              "uuid": "7f30159a-f86d-47dc-8129-4426d7a0890c",
              "parentUUID": "b3b46f84-4940-4f04-9d91-fe27f5ccfcc1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "16548f83-c24b-4f61-a143-a401b86ef239",
            "ce00940b-b7e8-4e03-8220-2f7bcb1ffab4",
            "037617a1-8976-47ef-9a9b-a98061e9e5d5",
            "7f30159a-f86d-47dc-8129-4426d7a0890c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}